PyTorch Version:  1.12.1
Torchvision Version:  0.13.1
The selected epochs is: 10
The selected device is: cuda:1
Using pretrained model!!
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (36): ReLU(inplace=True)
    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (39): ReLU(inplace=True)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=39, bias=True)
  )
)
Params to learn:
	 features.0.weight
	 features.0.bias
	 features.1.weight
	 features.1.bias
	 features.3.weight
	 features.3.bias
	 features.4.weight
	 features.4.bias
	 features.7.weight
	 features.7.bias
	 features.8.weight
	 features.8.bias
	 features.10.weight
	 features.10.bias
	 features.11.weight
	 features.11.bias
	 features.14.weight
	 features.14.bias
	 features.15.weight
	 features.15.bias
	 features.17.weight
	 features.17.bias
	 features.18.weight
	 features.18.bias
	 features.20.weight
	 features.20.bias
	 features.21.weight
	 features.21.bias
	 features.24.weight
	 features.24.bias
	 features.25.weight
	 features.25.bias
	 features.27.weight
	 features.27.bias
	 features.28.weight
	 features.28.bias
	 features.30.weight
	 features.30.bias
	 features.31.weight
	 features.31.bias
	 features.34.weight
	 features.34.bias
	 features.35.weight
	 features.35.bias
	 features.37.weight
	 features.37.bias
	 features.38.weight
	 features.38.bias
	 features.40.weight
	 features.40.bias
	 features.41.weight
	 features.41.bias
	 classifier.0.weight
	 classifier.0.bias
	 classifier.3.weight
	 classifier.3.bias
	 classifier.6.weight
	 classifier.6.bias
Epoch 0/9
----------
train Loss: 0.4967 Acc: 0.8566
val Loss: 0.0909 Acc: 0.9700
Test Accuracy: 0.025210

Epoch 1/9
----------
train Loss: 0.1966 Acc: 0.9382
val Loss: 0.0806 Acc: 0.9748
Test Accuracy: 0.033613

Epoch 2/9
----------
train Loss: 0.1478 Acc: 0.9532
val Loss: 0.0448 Acc: 0.9852
Test Accuracy: 0.016807

Epoch 3/9
----------
train Loss: 0.1253 Acc: 0.9598
val Loss: 0.0396 Acc: 0.9873
Test Accuracy: 0.042017

Epoch 4/9
----------
train Loss: 0.1142 Acc: 0.9635
val Loss: 0.0345 Acc: 0.9893
Test Accuracy: 0.025210

Epoch 5/9
----------
train Loss: 0.0980 Acc: 0.9684
val Loss: 0.0282 Acc: 0.9911
Test Accuracy: 0.042017

Epoch 6/9
----------
train Loss: 0.0924 Acc: 0.9703
val Loss: 0.0279 Acc: 0.9917
Test Accuracy: 0.025210

Epoch 7/9
----------
train Loss: 0.0871 Acc: 0.9724
val Loss: 0.0245 Acc: 0.9919
Test Accuracy: 0.008403

Epoch 8/9
----------
train Loss: 0.0825 Acc: 0.9740
val Loss: 0.0262 Acc: 0.9922
Test Accuracy: 0.008403

Epoch 9/9
----------
train Loss: 0.0747 Acc: 0.9756
val Loss: 0.0187 Acc: 0.9940
Test Accuracy: 0.016807

Training complete in 90m 59s
Best Test Acc: 0.042017
stats = 
{'train_loss': [0.49673588320927337, 0.1966089878531608, 0.14783600295916396, 0.12534119344066869, 0.11422813145393912, 0.09796657920416973, 0.09243767502965275, 0.08712401512454436, 0.08247628366211975, 0.0747077062841885], 'val_loss': [0.09090754759940507, 0.08055796800305139, 0.04476239864423248, 0.0396366379448957, 0.03453680651114954, 0.02816548613472773, 0.027860171528020554, 0.02448832458841747, 0.026157728023284168, 0.018664368653782903], 'train_acc': [0.8565760403985752, 0.9381847693764371, 0.9532440596961088, 0.9598494070968032, 0.9635015104378014, 0.9684386131024842, 0.9702646647729833, 0.9723837864646737, 0.9740294873529013, 0.9755624690022092], 'val_acc': [0.9699729486023444, 0.9748422001803426, 0.9852119026149684, 0.9872858431018936, 0.9892696122633002, 0.9910730387736699, 0.9917042380522993, 0.9918845807033363, 0.9921550946798918, 0.99404869251578], 'test_acc': [0.025210084033613446, 0.03361344537815126, 0.01680672268907563, 0.04201680672268907, 0.025210084033613446, 0.04201680672268907, 0.025210084033613446, 0.008403361344537815, 0.008403361344537815, 0.01680672268907563], 'test_labels': [0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18], 'test_preds': [30, 31, 4, 12, 4, 1, 1, 31, 6, 11, 4, 4, 4, 8, 8, 11, 8, 1, 8, 4, 8, 8, 10, 4, 10, 17, 8, 4, 4, 4, 4, 4, 8, 8, 9, 17, 9, 19, 8, 8, 31, 4, 4, 10, 4, 4, 4, 4, 1, 9, 13, 31, 12, 31, 12, 12, 14, 14, 19, 19, 19, 19, 19, 31, 4, 19, 16, 19, 4, 31, 4, 4, 17, 21, 17, 17, 27, 25, 17, 17, 17, 17, 12, 19, 4, 21, 12, 21, 4, 30, 27, 21, 1, 27, 4, 30, 4, 30, 4, 9, 30, 30, 33, 30, 4, 4, 21, 22, 31, 31, 31, 31, 4, 30, 32, 30, 33, 30, 33]}
