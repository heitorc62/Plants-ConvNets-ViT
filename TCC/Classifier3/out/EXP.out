PyTorch Version:  1.12.1
Torchvision Version:  0.13.1
The selected epochs is: 10
The selected device is: cuda:1
Using pretrained model!!
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (36): ReLU(inplace=True)
    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (39): ReLU(inplace=True)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=39, bias=True)
  )
)
Params to learn:
	 features.0.weight
	 features.0.bias
	 features.1.weight
	 features.1.bias
	 features.3.weight
	 features.3.bias
	 features.4.weight
	 features.4.bias
	 features.7.weight
	 features.7.bias
	 features.8.weight
	 features.8.bias
	 features.10.weight
	 features.10.bias
	 features.11.weight
	 features.11.bias
	 features.14.weight
	 features.14.bias
	 features.15.weight
	 features.15.bias
	 features.17.weight
	 features.17.bias
	 features.18.weight
	 features.18.bias
	 features.20.weight
	 features.20.bias
	 features.21.weight
	 features.21.bias
	 features.24.weight
	 features.24.bias
	 features.25.weight
	 features.25.bias
	 features.27.weight
	 features.27.bias
	 features.28.weight
	 features.28.bias
	 features.30.weight
	 features.30.bias
	 features.31.weight
	 features.31.bias
	 features.34.weight
	 features.34.bias
	 features.35.weight
	 features.35.bias
	 features.37.weight
	 features.37.bias
	 features.38.weight
	 features.38.bias
	 features.40.weight
	 features.40.bias
	 features.41.weight
	 features.41.bias
	 classifier.0.weight
	 classifier.0.bias
	 classifier.3.weight
	 classifier.3.bias
	 classifier.6.weight
	 classifier.6.bias
Epoch 0/9
----------
train Loss: 0.5268 Acc: 0.8460
val Loss: 0.0744 Acc: 0.9764
Test Accuracy: 0.025210

Epoch 1/9
----------
train Loss: 0.2016 Acc: 0.9381
val Loss: 0.0645 Acc: 0.9778
Test Accuracy: 0.042017

Epoch 2/9
----------
train Loss: 0.1531 Acc: 0.9513
val Loss: 0.0352 Acc: 0.9877
Test Accuracy: 0.050420

Epoch 3/9
----------
train Loss: 0.1254 Acc: 0.9601
val Loss: 0.0468 Acc: 0.9846
Test Accuracy: 0.042017

Epoch 4/9
----------
train Loss: 0.1155 Acc: 0.9636
val Loss: 0.0304 Acc: 0.9895
Test Accuracy: 0.008403

Epoch 5/9
----------
train Loss: 0.1068 Acc: 0.9663
val Loss: 0.0281 Acc: 0.9907
Test Accuracy: 0.016807

Epoch 6/9
----------
train Loss: 0.0941 Acc: 0.9701
val Loss: 0.0250 Acc: 0.9919
Test Accuracy: 0.042017

Epoch 7/9
----------
train Loss: 0.0889 Acc: 0.9718
val Loss: 0.0286 Acc: 0.9907
Test Accuracy: 0.025210

Epoch 8/9
----------
train Loss: 0.0813 Acc: 0.9737
val Loss: 0.0222 Acc: 0.9937
Test Accuracy: 0.033613

Epoch 9/9
----------
train Loss: 0.0781 Acc: 0.9745
val Loss: 0.0277 Acc: 0.9905
Test Accuracy: 0.050420

Training complete in 86m 28s
Best Test Acc: 0.050420
stats = 
{'train_loss': [0.5267607029328387, 0.20155301381050675, 0.15313394605595934, 0.12542300025746553, 0.11550110627848552, 0.10677116723468442, 0.09409218498052903, 0.08890716922232922, 0.08125921974552923, 0.07813625233788145], 'val_loss': [0.07444151840844372, 0.06447701804929348, 0.03522155336326351, 0.04682118647763901, 0.0304032695882108, 0.028067140121716495, 0.024988638346055355, 0.02863629406620529, 0.02224478593725491, 0.02768847468270447], 'train_acc': [0.8459578880923395, 0.9380720501375174, 0.9512602010911222, 0.9600973894224265, 0.963636773524505, 0.9662518598674421, 0.9700843139907118, 0.9718201902700753, 0.9736687857883582, 0.974547995851932], 'val_acc': [0.9763751127141569, 0.9778178539224527, 0.987736699729486, 0.9845807033363391, 0.9895401262398557, 0.990712353471596, 0.9918845807033363, 0.990712353471596, 0.993688007213706, 0.9905320108205591], 'test_acc': [0.025210084033613446, 0.04201680672268907, 0.05042016806722689, 0.04201680672268907, 0.008403361344537815, 0.01680672268907563, 0.04201680672268907, 0.025210084033613446, 0.03361344537815126, 0.05042016806722689], 'test_labels': [0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18], 'test_preds': [22, 31, 4, 12, 4, 1, 2, 31, 28, 4, 8, 8, 4, 8, 8, 8, 8, 11, 8, 8, 8, 10, 10, 4, 4, 11, 11, 11, 8, 4, 4, 4, 8, 9, 9, 11, 9, 8, 8, 8, 8, 11, 11, 8, 4, 4, 4, 4, 5, 8, 13, 31, 13, 31, 12, 12, 14, 14, 4, 28, 9, 16, 11, 11, 11, 4, 9, 9, 31, 31, 28, 4, 19, 21, 9, 17, 4, 4, 12, 12, 21, 21, 8, 19, 19, 21, 12, 21, 21, 31, 14, 4, 4, 4, 4, 31, 21, 30, 4, 9, 30, 31, 26, 31, 31, 31, 31, 31, 31, 31, 31, 31, 4, 26, 31, 4, 30, 30, 4]}
